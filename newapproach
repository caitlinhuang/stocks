#Caitlin Huang
#caitlinh
#section G

#referenced https://matplotlib.org/gallery/user_interfaces/embedding_in_
#tk_canvas_sgskip.html and the 15112 website

from tkinter import *
import tkinter.messagebox
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from stock import *
import webScraper
import datetime
import dateutil.relativedelta

####################################
# customize these functions
####################################

def init(data):
    data.stockSym = ""
    data.now = datetime.datetime.now()
    endDateUncleaned = str(data.now)
    data.endDate = endDateUncleaned[:10]
    data.startDate = '1980-01-01'
    data.clickStockEntry = False
    data.clickOpen = False
    data.clickClose = False
    data.clickHigh = False
    data.clickLow = False
    data.clickMax = False
    #data.typesPrice = [data.clickOpen, data.clickClose, data.clickHigh, data.clickLow]
    data.timeFrameStatus = "1 Week"
    data.timeFrames = ["1 Week", "1 Month", "6 Months", "1 Year", "5 Years",
    "Max", "30 Day Prediction"]
    data.retrieving = False
    data.graphAvailable = False
    data.stock = None
    data.mouseOnGraph = False
    #parameters for where the mouse is pointing to on the figure
    data.figX = 0
    data.figY = 0
    
def mousePressedZoom(event, data):
    xStartButtons = 50
    yStartButtons = 95
    buttonHeight = 40
    buttonWidth = 80
    numButtons = 7
    if event.x > xStartButtons and \
    event.x < xStartButtons + (numButtons * buttonWidth) and \
    event.y > yStartButtons and event.y < yStartButtons + buttonHeight:
        data.clickStockEntry = False
        #data.clickDateEntry = False
        indexZoomClick = (event.x - xStartButtons)//buttonWidth
        data.timeFrameStatus = data.timeFrames[indexZoomClick]
        if data.timeFrameStatus == "1 Week":
            startDateUncleaned = str(data.now - datetime.timedelta(days = 7))
            data.startDate = startDateUncleaned[:10]
        elif data.timeFrameStatus == "1 Month":
            data.startDate = data.now - \
            dateutil.relativedelta.relativedelta(months = 1)
            data.startDate = str(data.startDate)
            data.startDate = data.startDate[:10]
        elif data.timeFrameStatus == "6 Months":
            data.startDate = data.now - \
            dateutil.relativedelta.relativedelta(months = 6)
            data.startDate = str(data.startDate)
            data.startDate = data.startDate[:10]
        elif data.timeFrameStatus == "1 Year" or \
        data.timeFrameStatus == "5 Years":
            uncleanedNow = str(data.now)
            currYear = int(uncleanedNow[:4])
            if data.timeFrameStatus == "1 Year":
                data.startDate = str(currYear - 1) + uncleanedNow[4: 10]
            else:
                data.startDate = str(currYear - 5) + uncleanedNow[4: 10]
        elif data.timeFrameStatus == "Max":
            data.startDate = "1980-01-01"
        else:
            data.startDate = data.endDate
        isValidStockSym(data)
            
def mousePressed(event, data):
    if event.x > data.width/2 - 100 and event.x < data.width/2 + 100 and \
    event.y > 40 and event.y < 60:
        data.clickStockEntry = True
    mousePressedZoom(event, data)
    
def mouseMovement(event, data):
    if event.y > 183 and event.y < 590 and event.x > 107 and event.x < 590:
        data.figX = event.x
        data.figY = event.y
        data.mouseOnGraph = True

def keyPressed(event, data):
    if data.clickStockEntry == True:
        if event.keysym == "BackSpace":
            if len(data.stockSym) > 0:
                data.stockSym = data.stockSym[: -1]
        elif event.keysym != "Return" and event.keysym != "BackSpace" and \
        len(data.stockSym) < 25:
            data.stockSym += event.char
        elif event.keysym == "Return":
            data.retrieving = True
            isValidStockSym(data)
        
def isValidStockSym(data):
    try:
        data.stock = Stock(data.stockSym, data.startDate, data.endDate)
        data.stock.setCompany()
    except Exception as e:
        print("Exception:", str(e))
        invalidStockSym(data)
        
def invalidStockSym(data):
    #global canvas
    tkinter.messagebox.showwarning("Warning", 
    "The Stock Symbol is invalid! Please try again.")

def timerFired(data):
    pass

def redrawAll(canvas, data):
    drawSearchBars(canvas, data)
    #drawTypePriceButtons(canvas, data)
    drawUserInput(canvas, data)
    if data.stock != None:
        drawZoomButtons(canvas, data)
        data.stock.drawStockGraph()
        data.stock.drawStockFigure(canvas)
        data.stock.drawStockAnalysisFigure(canvas)
        data.stock.drawStockNewsFigure(canvas)
        #if data.mouseOnGraph == True:
            #data.stock.drawPrices(canvas, data.figX, data.figY)
    
def drawZoomButtons(canvas, data):
    xStartButtons = 50
    yStartButtons = 95
    buttonHeight = 40
    buttonWidth = 80
    numButtons = 7
    timespans = ["1 Week", "1 Month", "6 Months", "1 Year", "5 Years", 
    "Max", "Thirty-day\nForecast"]
    for i in range(numButtons):
        color = "DarkOrchid1"
        if i % 2 == 0:
            color = "cyan"
        canvas.create_rectangle(xStartButtons + i * buttonWidth, yStartButtons, 
        xStartButtons + (i + 1) * buttonWidth, yStartButtons + buttonHeight, 
        fill = color)
        canvas.create_text(xStartButtons + buttonWidth/2 + buttonWidth * i, 
        yStartButtons + buttonHeight/2, text = timespans[i])
    
def drawSearchBars(canvas, data):
    canvas.create_text(data.width/2 - 200, 50, 
    text = "Enter a stock ticker symbol")
    canvas.create_rectangle(data.width/2 - 100, 40, data.width/2 + 100, 60, 
    outline = "green2", width = 4)

def drawTypePriceButtons(canvas, data):
    canvas.create_rectangle(data.width/2 - 100, 70, data.width/2, 90, 
    fill = "maroon1")
    canvas.create_text(data.width/2 - 50, 80, text = "Close")
    canvas.create_rectangle(data.width/2 - 200, 70, data.width/2 - 100, 90, 
    fill = "purple1")
    canvas.create_text(data.width/2 - 150, 80, text = "Open")
    canvas.create_rectangle(data.width/2, 70, data.width/2 + 100, 90, 
    fill = "maroon1")
    canvas.create_text(data.width/2 + 50, 80, text = "High")
    canvas.create_rectangle(data.width/2 + 100, 70, data.width/2 + 200, 90, 
    fill = "purple1")
    canvas.create_text(data.width/2 + 150, 80, text = "Low")
    
def drawUserInput(canvas, data):
    canvas.create_text(data.width/2, 50, text = data.stockSym)
    #canvas.create_text(data.width/2, 80, text = data.date)

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        #canvas.create_rectangle(0, 0, data.width, data.height,
                                #fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)
        
    def mouseMovementWrapper(event, canvas, data):
        mouseMovement(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 0 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    canvas.bind("<Motion>", lambda event: mouseMovementWrapper(event, canvas,
    data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(800, 700)
