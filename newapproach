#Caitlin Huang
#caitlinh
#section G

#referenced https://matplotlib.org/gallery/user_interfaces/embedding_in_
#tk_canvas_sgskip.html and the 15112 website

from tkinter import *
import tkinter.messagebox
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from stock import *
import webScraper

####################################
# customize these functions
####################################

def init(data):
    data.stockSym = ""
    data.date = ""
    data.clickStockEntry = False
    data.clickDateEntry = False
    data.clickOneDay = False
    data.clickOneWeek = False
    data.clickOneMonth = False
    data.clickSixMonth = False
    data.clickOneYear = False
    data.clickFiveYears = False
    data.thirtyDayPrediction = False
    data.zoomClicks = [data.clickOneDay, data.clickOneWeek, data.clickOneMonth,
    data.clickSixMonth, data.clickOneYear, data.clickFiveYears, 
    data.thirtyDayPrediction]
    data.retrieving = False
    data.graphAvailable = False
    data.stock = None
    
def mousePressedZoom(event, data):
    xStartButtons = 50
    yStartButtons = 95
    buttonHeight = 40
    buttonWidth = 80
    numButtons = 7
    if event.x > xStartButtons and \
    event.x < xStartButtons + (numButtons * buttonWidth) and \
    event.y > yStartButtons and event.y < yStartButtons + buttonHeight:
        data.clickStockEntry = False
        data.clickDateEntry = False
        indexZoomClick = (event.x - xStartButtons) % buttonWidth
        print("x", event.x)
        print("zoom index", indexZoomClick)
        data.zoomClicks[indexZoomClick] = True
        for i in range(len(data.zoomClicks)):
            if i != indexZoomClick:
                data.zoomClicks[i] = False

def mousePressed(event, data):
    if event.x > data.width/2 - 100 and event.x < data.width/2 + 100 and \
    event.y > 40 and event.y < 60:
        data.clickStockEntry = True
        for i in range(len(data.zoomClicks)):
            data.zoomClicks[i] = False
    elif event.x > data.width/2 - 100 and event.x < data.width/2 + 100 and \
    event.y > 70 and event.y < 90:
        data.clickStockEntry = False
        data.clickDateEntry = True
        for i in range(len(data.zoomClicks)):
            data.zoomClicks[i] = False
    mousePressedZoom(event, data)

def keyPressed(event, data):
    if data.clickStockEntry == True:
        if event.keysym == "BackSpace":
            if len(data.stockSym) > 0:
                data.stockSym = data.stockSym[: -1]
        elif event.keysym != "Return" and event.keysym != "BackSpace" and \
        len(data.stockSym) < 25:
            data.stockSym += event.char
        elif event.keysym == "Return":
            data.retrieving = True
            isValidStockSym(data)
    elif data.clickDateEntry == True:
        if event.keysym == "BackSpace":
            if len(data.date) > 0:
                data.date = data.date[: -1]
        elif event.keysym != "Return" and event.keysym != "BackSpace" and \
        len(data.date) < 10:
            data.date += event.char
        elif event.keysym == "Return":
            data.retrieving = True
            isValidStockSym(data)
        
def isValidStockSym(data):
    try:
        data.stock = Stock(data.stockSym, data.date)
        data.stock.setCompany()
    except:
        invalidStockSym(data)
        
def invalidStockSym(data):
    #global canvas
    tkinter.messagebox.showwarning("Warning", 
    "The Stock Symbol is invalid! Please try again.")

def timerFired(data):
    pass

def redrawAll(canvas, data):
    drawSearchBars(canvas, data)
    drawUserInput(canvas, data)
    if data.stock != None:
        drawZoomButtons(canvas, data)
        data.stock.drawStockGraph()
        data.stock.drawStockFigure(canvas)
        
def drawZoomButtons(canvas, data):
    xStartButtons = 50
    yStartButtons = 95
    buttonHeight = 40
    buttonWidth = 80
    numButtons = 7
    timespans = ["1 Day", "1 Week", "1 Month", "6 Months",
    "1 Year", "5 Years", "Thirty-day\nForecast"]
    for i in range(numButtons):
        color = "DarkOrchid1"
        if i % 2 == 0:
            color = "cyan"
        canvas.create_rectangle(xStartButtons + i * buttonWidth, yStartButtons, 
        xStartButtons + (i + 1) * buttonWidth, yStartButtons + buttonHeight, 
        fill = color)
        canvas.create_text(xStartButtons + buttonWidth/2 + buttonWidth * i, 
        yStartButtons + buttonHeight/2, text = timespans[i])
    
def drawSearchBars(canvas, data):
    canvas.create_text(data.width/2 - 200, 50, 
    text = "Enter a stock ticker symbol")
    canvas.create_rectangle(data.width/2 - 100, 40, data.width/2 + 100, 60, 
    outline = "green2", width = 4)
    canvas.create_text(data.width/2 - 180, 80, text = "Enter the last date")
    canvas.create_rectangle(data.width/2 - 100, 70, data.width/2 + 100, 90,
    outline = "green2", width = 4)
    
def drawUserInput(canvas, data):
    canvas.create_text(data.width/2, 50, text = data.stockSym)
    canvas.create_text(data.width/2, 80, text = data.date)

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(800, 700)
