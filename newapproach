from tkinter import *
import tkinter.messagebox

####################################
# customize these functions
####################################

def init(data):
    data.stockSym = "hi"
    data.clickStockEntry = False
    data.retrieving = False

def mousePressed(event, data):
    if event.x > data.width/2 - 100 and event.x < data.width/2 + 100 and \
    event.y > 40 and event.y < 60:
        data.clickStockEntry = True

def keyPressed(event, data):
    if event.keysym == "BackSpace":
        if len(data.stockSym) > 0:
            data.stockSym = data.stockSym[: -2]
    elif event.keysym != "Return" and event.keysym != "BackSpace" and \
    len(data.stockSym) < 25:
        data.stockSym += event.char
    elif event.keysym == "Return":
        data.retrieving = True
        isValidStockSym(data)
        
def isValidStockSym(data):
    try:
        stockData = getStockInfo("WIKI/" + data.stockSym, "2018-12-30")
    except:
        invalidStockSym(data)
        
def invalidStockSym(data):
    #global canvas
    tkinter.messagebox.showwarning("Warning", 
    "The Stock Symbol is invalid! Please try again.")

def timerFired(data):
    pass

def redrawAll(canvas, data):
    drawSearchBar(canvas, data)
    drawUserInput(canvas, data)
    
def drawSearchBar(canvas, data):
    canvas.create_text(data.width/2 - 200, 50, 
    text = "Enter a stock ticker symbol")
    canvas.create_rectangle(data.width/2 - 100, 40, data.width/2 + 100, 60, 
    outline = "green2", width = 4)
    
def drawUserInput(canvas, data):
    canvas.create_text(data.width/2, 50, text = data.stockSym)

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(700, 700)
