import matplotlib
matplotlib.use("TkAgg")
import matplotlib.backends.tkagg as tkagg
from matplotlib.backends.backend_tkagg import FigureCanvasAgg
import sys
import requests
import json
import urllib.request
#from alchemyapi import AlchemyAPI
from webScraper import *
import time
import datetime
import unicodedata
import pprint
import numpy as np
#import matplotlib.finance
#import mpl_finance
from matplotlib.figure import Figure
import matplotlib.pyplot
from tkinter import *
import matplotlib as mpl
import webbrowser
import matplotlib.ticker as mticker
import matplotlib.dates as mdates
import tkinter.messagebox
import tkinter.simpledialog
#from PIL import Image, ImageTk
import os
import threading
import string
import quandl

#referenced https://matplotlib.org/gallery/user_interfaces/embedding_in_
#tk_canvas_sgskip.html and the 15112 website

class Stock(object):
    def __init__(self, symbol, date):
        self.date = date
        self.symbol = symbol
        self.company = None
        self.graph = None

    def setCompany(self):
        uncleanedName = parse_finance_page(str(self.symbol)).get("company_name")
        separatedName = uncleanedName.split(" ")
        name = ""
        for word in separatedName[:-7]:
            name += word + " "
        self.company = name

    def drawStockFigure(self, canvas, loc=(50,140)):
        #Draw a matplotlib figure onto a Tk canvas
        #loc: location of top-left corner of figure on canvas in pixels.
        #Inspired by matplotlib source: lib/matplotlib/backends/backend_tkagg.py
        self.chart = FigureCanvasAgg(self.figure)
        self.chart.draw()
        (self.chartX, self.chartY, self.chartWidth, 
        self.chartHeight) = (self.figure.bbox.bounds)
        (self.chartY, self.chartWidth) = (int(self.chartY), 
        int(self.chartWidth))
        self.display = PhotoImage(master = canvas, width = int(self.chartWidth), 
        height = int(self.chartHeight))
        canvas.delete(self.graph)
        self.graph = canvas.create_image(loc[0] + self.chartWidth/2,
            loc[1] + self.chartHeight/2, image = self.display)
        tkagg.blit(self.display, self.chart.get_renderer()._renderer,
        colormode = 2)
        
    def getPricesOrDate(self, fieldName):
        auth_tok = "c2V_sVydLtbotC8xN8sH"
        stockRawData = quandl.get("EOD/"+ self.symbol, 
        trim_start = "1980-01-01", trim_end = self.date, authtoken=auth_tok)
        return stockRawData.get(fieldName)

    def drawStockGraph(self):
        while self.company == None:
            time.sleep(0.001)
        #data = quandl.get("EOD/"+ self.symbol, trim_start = "1980-01-01", trim_end = self.date, authtoken=auth_tok)
        open = self.getPricesOrDate('Adj_Open')
        high = self.getPricesOrDate('Adj_High')
        low = self.getPricesOrDate('Adj_Low')
        close = self.getPricesOrDate('Adj_Close')
        chart = matplotlib.pyplot.figure(facecolor = "blue", figsize = (6, 4), dpi = 90)
        graph = matplotlib.pyplot.subplot(1, 1, 1)
        graph.plot(high, label = "High Price", linestyle = '-.')
        graph.plot(low, label = "Low Price", linestyle = "-")
        graph.plot(open, label = "Open Price", linestyle = ":")
        graph.plot(close, label = "Close Price")
        graph.grid(True, which = "major", axis = "both", color = "blue")
        matplotlib.pyplot.xlabel("Date", color = "blue", fontsize = 12)
        matplotlib.pyplot.ylabel("Prices", color = "blue", fontsize = 12)
        matplotlib.pyplot.title(self.company, color = "magenta")
        self.low, self.high = graph.get_ylim()
        self.figure = chart
        
    def drawPrices(self, canvas, x, y):
        highPixel = 183
        lowPixel = 499
        yChange = abs(y - lowPixel)
        difference = abs(self.high - self.low)
        proportionGraph = difference/(lowPixel - highPixel)
        priceDisplay = proportionGraph * yChange
        canvas.create_rectangle(x - 20, y - 30, x + 20, y - 10, outline = "gold")
        canvas.create_text(x, y - 20, text = round(float(priceDisplay), 2))

    def drawStockAnalysisFigure(self, canvas, loc=(50,140)):
        canvas.create_rectangle(loc[0], loc[1] + 400,
        loc[0] + 250, loc[1] + 525)
        canvas.create_text((loc[0] + 80, loc[1] + 420),
        text = "Stock Statistics Analysis Data")
        
    def getStockAnalysisData(self):
        pass

    def drawStockNewsFigure(self, canvas, loc=(50, 140)):
        canvas.create_rectangle(loc[0]+300, loc[1]+400, loc[0]+600, loc[1]+525)
        canvas.create_text((loc[0]+380, loc[1]+420), text="News Summary")

    def getStockNewsData(self):
        pass

    def __eq__(self,other):
        return isinstance(other,Stock) and self.symbol==other.symbol\
               and self.date==other.date
