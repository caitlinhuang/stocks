import matplotlib
matplotlib.use("TkAgg")
import matplotlib.backends.tkagg as tkagg
from matplotlib.backends.backend_tkagg import FigureCanvasAgg
from webScraper import *
import time
import datetime
import numpy as np
from matplotlib.figure import Figure
import matplotlib.pyplot
from tkinter import *
import string
import quandl
from newsPreProcess import newsPreProcess
import linearPrediction
import math
import dateutil.relativedelta

#referenced https://matplotlib.org/gallery/user_interfaces/embedding_in_
#tk_canvas_sgskip.html, lib/matplotlib/backends/backend_tkagg.py,
# and the 15112 website

class Stock(object):
    def __init__(self, symbol, startDate, endDate):
        self.symbol = symbol
        self.company = None
        self.graph = None
        today = endDate.split('-')
        self.endTime = today[0] + today[1] + today[2]
        sDate = startDate.split('-')
        self.startTime = sDate[0] + sDate[1] + sDate[2]
        self.price = list()

    def setCompany(self):
        uncleanedName = parse_finance_page(str(self.symbol)).get("company_name")
        separatedName = uncleanedName.split(" ")
        name = ""
        for word in separatedName[:-7]:
            name += word + " "
        self.company = name

    def drawStockFigure(self, canvas, loc=(50, 140)):
        #draws a matplotlib graph on the tkinter canvas
        #location of top-left corner of figure on canvas in pixels.
        self.chart = FigureCanvasAgg(self.figure)
        self.chart.draw()
        (self.chartX, self.chartY, self.chartWidth, 
        self.chartHeight) = (self.figure.bbox.bounds)
        (self.chartY, self.chartWidth) = (int(self.chartY), 
        int(self.chartWidth))
        self.display = PhotoImage(master = canvas, width = int(self.chartWidth), 
        height = int(self.chartHeight))
        canvas.delete(self.graph)
        self.graph = canvas.create_image(loc[0] + self.chartWidth/2,
            loc[1] + self.chartHeight/2, image = self.display)
        tkagg.blit(self.display, self.chart.get_renderer()._renderer,
        colormode = 2)

    def getPrices(self, fieldName):
        auth_tok = "c2V_sVydLtbotC8xN8sH"
        uncleanedDate = str(datetime.datetime.now())
        lstDate = uncleanedDate.split(" ")
        stockRawData = quandl.get("EOD/" + self.symbol,
            authtoken = auth_tok, collapse = "quarterly")
        if self.startTime == "19800101":
            stockRawData = quandl.get("EOD/" + self.symbol,
            authtoken = auth_tok, collapse = "quarterly")
        elif int(self.endTime[:4]) - int(self.startTime[:4]) == 5:
            stockRawData = quandl.get("EOD/" + self.symbol,
            trim_start = self.startTime, trim_end = lstDate[0],
            authtoken = auth_tok, collapse = "monthly")
        else:
            stockRawData = quandl.get("EOD/"+ self.symbol, 
            trim_start = self.startTime, trim_end = lstDate[0],
            authtoken=auth_tok)
        return stockRawData.get(fieldName)

    def drawStockGraph(self):
        while self.company == None:
            time.sleep(0.001)
        chart = matplotlib.pyplot.figure(facecolor = "green",
        figsize = (6, 4), dpi = 90)
        graph = matplotlib.pyplot.subplot(1, 1, 1)
        if self.startTime == self.endTime:
            forecast = linearPrediction.forecast30Days(self.symbol)
            graph.plot(forecast, label = "Forecasted Closing Prices",
            linestyle = "-")
        else:
            self.price = self.getPrices('Adj_Close')
            graph.plot(self.price, label = "Close Price", linestyle = '-')
        graph.grid(True, which = "major", axis = "both", color = "blue")
        matplotlib.pyplot.xlabel("Date", color = "blue", fontsize = 12)
        matplotlib.pyplot.ylabel("Prices", color = "blue", fontsize = 12)
        matplotlib.pyplot.title(self.company, color = "magenta")
        self.low, self.high = graph.get_ylim()
        self.figure = chart
        
    """def mouseMotion(self, event):
        date = event.xdata
        price = event.ydata
        return date, price"""
        
    def drawPrices(self, canvas, x, y):
        highPixel = 183
        lowPixel = 499
        yChange = abs(y - lowPixel)
        difference = abs(self.high - self.low)
        proportionGraph = difference/(lowPixel - highPixel)
        priceDisplay = proportionGraph * yChange
        canvas.create_rectangle(x - 20, y - 30, x + 20, y - 10,
        outline = "gold")
        canvas.create_text(x, y - 20, text = round(float(priceDisplay), 2))

    def drawStockAnalysisFigure(self, canvas, loc=(50,140)):
        canvas.create_rectangle(loc[0], loc[1] + 400,
        loc[0] + 250, loc[1] + 525)
        canvas.create_text((loc[0] + 10, loc[1] + 420),
        text = "Stock Statistics Analysis Data", anchor = W)
        fiftyDayMovingAvg, twoHundredMovingAvg = self.get50And200DayMovingAvg()
        canvas.create_text((loc[0] + 10, loc[1] + 450),
        text = "50-Day Moving Average: " + str(round(fiftyDayMovingAvg, 2)),
        anchor = W)
        canvas.create_text((loc[0] + 10, loc[1] + 480),
        text = "200-Day Moving Average: " + str(round(twoHundredMovingAvg, 2)),
        anchor = W)
        volatility = self.getVolatility()
        canvas.create_text((loc[0] + 10, loc[1] + 510),
        text = "Volatility: " + str(round(volatility, 3)), anchor = W)
        
    def getStockAnalysisData(self):
        pass

    def get50And200DayMovingAvg(self):
        recentPrices = self.getPricesInOverOneYear('Adj_Close')
        last50 = recentPrices[-50:]
        fiftyMoveAvg = self.mean(last50)
        last200 = recentPrices[-200:]
        twoHundredMoveAvg = self.mean(last200)
        return fiftyMoveAvg, twoHundredMoveAvg
        
    def getPricesInOverOneYear(self, fieldname):
        auth_tok = "c2V_sVydLtbotC8xN8sH"
        uncleanedDate = str(datetime.datetime.now())
        uncleanedStart = str(datetime.datetime.now() - \
        dateutil.relativedelta.relativedelta(months = 14))
        end = uncleanedDate[:10]
        start = uncleanedStart[:10]
        year = quandl.get("EOD/"+ self.symbol, trim_start = start,
        trim_end = end, authtoken=auth_tok)
        return year.get(fieldname)
        
        #calculates the volatility for the stock prices
    def getVolatility(self):
        recentPrices = self.getPricesInOverOneYear('Adj_Close')
        volatility = list()
        avgTradingDaysInYear = 252
        for i in range(avgTradingDaysInYear):
            volatility.append(math.log(recentPrices[-(avgTradingDaysInYear - \
            i)]/recentPrices[-(avgTradingDaysInYear - i + 1)]))
        meanReturn = self.mean(volatility)
        deviations = list()
        for i in range(avgTradingDaysInYear):
            deviations.append(volatility[i] - meanReturn)
        #finding the variance
        squaresOfDeviations = list()
        for i in range(avgTradingDaysInYear):
            squaresOfDeviations.append(deviations[i]**2)
        sqDeviationsTotal = sum(squaresOfDeviations)
        variance = sqDeviationsTotal/(len(squaresOfDeviations) - 1)
        #volality is the square root of the variance
        return math.sqrt(variance)
        
    def mean(self, lst):
        count = 0
        total = 0
        for item in lst:
            total += item
            count += 1
        return total/count
        
    def drawStockNewsFigure(self, canvas, locStats=(50, 140),
    locTitles = (610, 140)):
        canvas.create_rectangle(locStats[0] + 300, locStats[1] + 400,
        locStats[0] + 700, locStats[1] + 525)
        canvas.create_text((locStats[0] + 310, locStats[1] + 420),
        text="NEWS SUMMARY :", anchor = W)
        sScore, rScore, newsTitles = self.getStockNewsData()
        canvas.create_text((locStats[0] + 430, locStats[1] + 420),
        text="Sentiment = "+ str(sScore), anchor = W)
        canvas.create_text((locStats[0] + 430, locStats[1] + 440),
        text="Relevance = "+ str(rScore), anchor = W)
        canvas.create_rectangle(locTitles[0], locTitles[1], locTitles[0] + 190,
        locTitles[1] + 400)
        canvas.create_text(locTitles[0] + 10, locTitles[1] + 10,
        text = "News Titles: ", anchor = W)
        for i in range(len(newsTitles)):
            canvas.create_text((locTitles[0] + 10,
            locTitles[1] + ((i + 2) * 20)), text=newsTitles[i], anchor = W)

    def drawNewsHeaders(self, canvas, location = (650, 140)):
        pass

    def getStockNewsData(self):
        companyName = ''
        if(self.company==None):
            companyName = self.setCompany()
        else:
            companyName = self.company
        companyNameList = companyName.split(" ")
        keyWord01 = ' '+companyNameList[0]+' '
        if len(companyNameList) > 1:
            keyWord02 = ' '+companyNameList[0]+ ' ' + companyNameList[1]+' '
        else:
            keyWord02 = ' '
        (sScore, rScore,
        newsTitles) = newsPreProcess("./news/Full-Economic-News-DFE-839861.csv",
        keyWord01, keyWord02, self.startTime, self.endTime)
        return sScore, rScore, newsTitles

    def __eq__(self,other):
        return isinstance(other,Stock) and self.symbol==other.symbol

    """def __hash__(self):
        hash((self.symbol))"""
